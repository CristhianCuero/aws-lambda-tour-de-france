service: aws-lambda-tour-de-france
# app and org for use with dashboard.serverless.com
app: aws-lambda-tour-de-france
org: criscuero

# Serverless version
frameworkVersion: '3'

provider:
  name: aws
  runtime: java8
  stage: dev
  region: us-east-1

# Environment Variables
  environment:
    REGION: ${opt:region, self:provider.region}
    FINISHERS_TABLE: ${opt:stage, self:provider.stage}-tourdefrance-finishers-tb
    STAGES_TABLE: ${opt:stage, self:provider.stage}-tourdefrance-stages-tb

# IAM Role
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamoDB:Query
            - dynamoDB:Scan
            - dynamoDB:GetItem
            - dynamoDB:BatchGetItem
            - dynamoDB:PutItem
            - dynamoDB:UpdateItem
            - dynamoDB:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:us-east-1:560077218111:table/dev-tourdefrance-finishers-tb
            - arn:aws:dynamodb:us-east-1:560077218111:table/dev-tourdefrance-stages-tb
        - Effect: "Allow"
          Action:
            - dynamoDB:Query
          Resource:
            - arn:aws:dynamodb:us-east-1:560077218111:table/dev-tourdefrance-stages-tb/index/stage_index

# Packaging Information
package:
  artifact: build/distributions/aws-lambda-tour-de-france.zip

functions:
  health:
    handler: com.serverless.Handler
    events:
      - httpApi:
          path: /health
          method: get
  rankings:
    handler: com.serverless.rider.ReadGeneralHandler
    events:
      - httpApi:
          path: /rankings
          method: get
    timeout: 10
  rankings_stage:
    handler: com.serverless.rider.ReadStageHandler
    events:
      - httpApi:
          path: /rankings/{stage}
          method: get
    timeout: 10
